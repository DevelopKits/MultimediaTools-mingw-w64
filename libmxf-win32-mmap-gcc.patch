--- mxf/mxf_win32_mmap.c.orig	2015-11-09 18:25:02.676727786 +0000
+++ mxf/mxf_win32_mmap.cpp	2015-11-09 19:27:39.575727786 +0000
@@ -45,14 +45,119 @@
 #include <string.h>
 #include <stdio.h>
 #include <windows.h>
+#include <excpt.h>
+#include <setjmp.h>
 
 #include <mxf/mxf.h>
 #include <mxf/mxf_win32_mmap.h>
 #include <mxf/mxf_macros.h>
 
+#if !defined(min)
+#define min(a, b) ((a) < (b) ? (a) : (b))
+#endif
+
 
 #define FILE_GROW_CHUNK_SIZE    (32 * 1024 * 1024)    // 32 MB
 
+class __SEH_HANDLER;
+
+typedef struct tag__SEH_EXCEPTION_REGISTRATION
+{
+    tag__SEH_EXCEPTION_REGISTRATION* prev;
+    PEXCEPTION_HANDLER handler;
+    __SEH_HANDLER* exthandler;
+} __SEH_EXCEPTION_REGISTRATION;
+
+
+class __SEH_HANDLER
+{
+    public:
+
+        // This is the main exception handling function.  This is called
+        // for each exception raised using this method.
+    static EXCEPTION_DISPOSITION ExceptionRouter(PEXCEPTION_RECORD pRecord, 
+            __SEH_EXCEPTION_REGISTRATION* pReg,
+            PCONTEXT pContext,
+            PEXCEPTION_RECORD pRecord2);
+
+        // This is the exception handler for this specific instance.  This is called by the
+        // ExceptionRouter class function.
+    virtual EXCEPTION_DISPOSITION ExceptionHandler(PEXCEPTION_RECORD pRecord, 
+            __SEH_EXCEPTION_REGISTRATION* pReg,
+            PCONTEXT pContext,
+            PEXCEPTION_RECORD pRecord2);
+        // This is the context buffer used by setjmp.  This stores the context at a given point
+        // in the program so that it can be resumed.
+        jmp_buf context;
+
+        // This is a copy of the EXCEPTION_RECORD structure passed to the exception handler.
+        EXCEPTION_RECORD excRecord;
+
+        // This is a copy of the CONTEXT structure passed to the exception handler.
+        CONTEXT excContext;    
+};
+
+
+// The main exception handler.
+EXCEPTION_DISPOSITION __SEH_HANDLER::ExceptionRouter(PEXCEPTION_RECORD pRecord, 
+        __SEH_EXCEPTION_REGISTRATION* pReg,
+        PCONTEXT pContext,
+        PEXCEPTION_RECORD pRecord2)
+{
+    // Retrieve the actual __SEH_HANDLER object from the registration, and call the 
+    // specific exception handling function.  Everything could have been done from this
+    // function alone, but I decided to use an instance method instead.
+    return pReg->exthandler->ExceptionHandler(pRecord, pReg, pContext, pRecord2);
+}
+
+EXCEPTION_DISPOSITION __SEH_HANDLER::ExceptionHandler(PEXCEPTION_RECORD pRecord, 
+        __SEH_EXCEPTION_REGISTRATION* pReg,
+        PCONTEXT pContext,
+        PEXCEPTION_RECORD pRecord2)
+{
+    // The objects pointed to by the pointers live on the stack, so a copy of them is required,
+    // or they may get overwritten by the time we've hit the real exception handler code
+    // back in the offending function. 
+    CopyMemory(&excContext, pContext, sizeof(_CONTEXT));
+    CopyMemory(&excRecord, pRecord, sizeof(_EXCEPTION_RECORD));
+
+    // Jump back to the function where the exception actually occurred.  The 1 is the
+    // return code that will be returned by set_jmp.
+    longjmp(context, 1);
+}
+
+
+// Note the unmatched braces in these macros.  These are to allow one to use
+// the same variable name more than once (new scope).
+#define __seh_try                                                             \
+{                                                                             \
+    __SEH_EXCEPTION_REGISTRATION _lseh_er;                                    \
+    __SEH_HANDLER _lseh_handler;                                              \
+    \
+    _lseh_er.handler =                                                        \
+    reinterpret_cast<PEXCEPTION_HANDLER>(__SEH_HANDLER::ExceptionRouter); \
+    _lseh_er.exthandler = &_lseh_handler;                                     \
+    asm volatile ("movl %%fs:0, %k0" : "=r" (_lseh_er.prev));                  \
+    asm volatile ("movl %k0, %%fs:0" : : "r" (&_lseh_er));                     \
+    int _lseh_setjmp_res = setjmp(_lseh_handler.context);                     \
+    while(true) {                                                             \
+        if(_lseh_setjmp_res != 0) {                                           \
+            break;                                                            \
+        }                                                                     \
+
+
+#define __seh_except(rec, ctx)                                                \
+        break;                                                                \
+    }                                                                         \
+    PEXCEPTION_RECORD rec = &_lseh_handler.excRecord;                         \
+    PCONTEXT ctx = &_lseh_handler.excContext;                                 \
+                                                                              \
+    asm volatile ("movl %k0, %%fs:0" : : "r" (_lseh_er.prev));                 \
+    if(_lseh_setjmp_res != 0)
+
+#define __seh_end }
+
+
 typedef enum
 {
     NEW_MODE,
@@ -273,7 +378,8 @@
         }
 
         // copy from memory mapped file to data array
-        __try
+ //       __try
+        __seh_try
         {
             uint32_t avail = min(sysData->size - sysData->cursor, count);
             if (avail > 0)
@@ -284,11 +390,14 @@
                 total_read += avail;
             }
         }
-        __except (GetExceptionCode() == EXCEPTION_IN_PAGE_ERROR ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)
-        {
-            // failed to read from the file mapping; return current value of "total_read"
-            break;
+//       __except (GetExceptionCode() == EXCEPTION_IN_PAGE_ERROR ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)
+        __seh_except(info, context)
+	{
+            // failed to read from the file mapping; return current value of "total_read"i
+            if(info->ExceptionCode == EXCEPTION_IN_PAGE_ERROR ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)
+		break;
         }
+	__seh_end
     }
 
     return total_read;
@@ -310,7 +419,8 @@
         }
 
         // copy from data array to memory mapped file
-        __try
+ //       __try
+	__seh_try 
         {
             uint32_t avail = min(sysData->size - sysData->cursor, count);
             if (avail > 0)
@@ -321,11 +431,14 @@
                 total_written += avail;
             }
         }
-        __except (GetExceptionCode() == EXCEPTION_IN_PAGE_ERROR ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)
+//        __except (GetExceptionCode() == EXCEPTION_IN_PAGE_ERROR ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)
+        __seh_except(info, context)
         {
             // failed to write to the file mapping; return current value of "total_written"
-            break;
+            if(info->ExceptionCode == EXCEPTION_IN_PAGE_ERROR ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)
+                break;
         }
+        __seh_end
     }
 
     // move EOF, if data was written after the current EOF
